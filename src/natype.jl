##############################################################################
##
## NA's via the NAType
##
## Inspirations:
##  * R's NA's
##  * Panda's discussion of NA's:
##    http://pandas.pydata.org/pandas-docs/stable/missing_data.html
##  * NumPy's analysis of the issue:
##    https://github.com/numpy/numpy/blob/master/doc/neps/missing-data.rst
##
## NAType is a composite type representing missingness:
## * An object of NAType can be generated by writing NA
##
##############################################################################

"""
    NAType

The type of a missing value, `NA`.
"""
struct NAType
end

"""
    NA

A value denoting missingness within the domain of any type.
"""
const NA = NAType()

Base.show(io::IO, x::NAType) = print(io, "NA")

struct NAException <: Exception
    msg::String
end
NAException() = NAException("NA found")

Base.length(x::NAType) = 1
Base.size(x::NAType) = ()
Base.size(x::NAType, i::Integer) = i < 1 ? throw(BoundsError()) : 1
Base.ndims(x::NAType) = 0
Base.getindex(x::NAType, i) = i == 1 ? NA : throw(BoundsError())

isna(x::NAType) = true
isna(x::Any) = false

# TODO: Rethink this rule
Base.promote_rule{T}(::Type{T}, ::Type{NAType} ) = T

Base.isnan(::NAType) = NA
